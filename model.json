[{"id":"12-building-a-keyboard","content":"<meta name=\"tags\" content=\"electronics\" />\n<meta name=\"published\" content=\"2016-03-30\" />\n<h1>Building a keyboard</h1>\n<p>I’ve been wanting to get into building some physical hardware. A keyboard seemed like a pretty good place to start.</p>\n<p>I started searching the internet for people that have done such a thing, and it turns out there are a lot and people have done it different ways.</p>\n<ul>\n<li>Complete DIY - <a href=\"http://www.davecooper.org/blog/2014/10/15/i-built-a-keyboard/\">My First Keyboard Build</a></li>\n<li>In days gone by there were <a href=\"https://geekhack.org/index.php?topic=23572.0\">Group Buys</a></li>\n<li>And kits like <a href=\"https://www.massdrop.com/buy/ergodox\">ErgoDox</a> and <a href=\"http://atreus.technomancy.us\">Atreus</a></li>\n</ul>\n<p>I started down the complete DIY path, and found some good suppliers for parts, but it was turning out to be a lot of work and I was not confident it would work at the end. So instead I went for the <a href=\"http://atreus.technomancy.us\">Atreus</a> kit.</p>\n<p>The website has an ordering form and I received a personal email from <a href=\"https://twitter.com/technomancy\">@technomancy</a> giving some options for payment. I paid and within a week or so I received the kit.</p>\n<h2>Unboxing</h2>\n<p>The kit includes all the parts required to build the keyboard as well as the instructions. The instructions proved useful and went to the level of complete beginner by explaining things step by step, which was great for someone who is <a href=\"https://thesciencedog.files.wordpress.com/2013/09/golden-retriever-and-science1.jpg\">science dogging</a> it.</p>\n<p><img src=\"./posts/12-building-a-keyboard/01-unboxed.jpg\" alt=\"Unboxed\"></p>\n<h2>Diodes</h2>\n<p>Since I had decided not to apply the finish to the keyboard, I jumped straight into soldering the diodes. This was the first time I had ever soldered something, so this was nerve-racking. The instructions did include some good links to soldering tutorials which did give some confidence.</p>\n<p><img src=\"./posts/12-building-a-keyboard/02-first-diodes.jpg\" alt=\"First Diodes\"></p>\n<h2>Microcontroller</h2>\n<p>The Atreus Keyboard uses a A-Star microcontroller to handle all the switch signals. Soldering it to the board was a little more tricky than the diodes as the contact points were much closer together and any slag could break the keyboard or make it behave unpredictably. I ended up scorching the board a little as I got nervous and took too long getting a good join.</p>\n<p><img src=\"./posts/12-building-a-keyboard/03-microcontroller.jpg\" alt=\"Microcontroller\"></p>\n<h2>Switches</h2>\n<p>With the controller in, the switches were next. The instructions recommended starting with the corner four switches, then the lowest row and the right most column. With a complete row and column it is possible to debug all the pins connected to the controller.</p>\n<p><img src=\"./posts/12-building-a-keyboard/04-debug-switches.jpg\" alt=\"Debug Switches\"></p>\n<p>At this point, with some fiddling, I was able to load the <a href=\"https://github.com/technomancy/atreus-firmware\">firmware</a>. I was pleasantly surprised to find that the firmware uses a pretty standard Arduino tool-chain and is implemented in C. When I get some more time I’ll be sure to tinker with it some more.</p>\n<p>With the firmware loaded and the keyboard into my computer, I was able to test some keys. I found that one of the columns was not behaving, my heart sank. I started thinking of all the parts I had soldered in that keys circuit and started getting really nervous at the thought of having to desolder a whole boatload of things. To debug this I checked all the diodes in the column and then tracked everything to the pins on the microcontroller, it all seemed fine. I doubled back to the switch and noticed I had missed one of the pins. It was an amateur mistake, but easily fixed.</p>\n<p>The board passed the preliminary checks, so I put in the rest of the switches.</p>\n<p><img src=\"./posts/12-building-a-keyboard/05-all-switches.jpg\" alt=\"All Switches\"></p>\n<h2>Finishing Touches</h2>\n<p>The last few steps of screwing the keyboard case together and pressing on the keycaps were all pretty trivial, although I did find I had to apply more force than I expected to get the keycaps on.</p>\n<h2>Complete</h2>\n<p>This project taught me a lot about electronics especially soldering and microcontroller firmware, but more importantly it has given me a lot more confidence to try some more hardware projects. It is all stuff that can be learned.</p>\n<p>I was also happy with the mind hack I did to myself. Many of my projects end up unfinished mostly due to me losing interest or getting paralysed with things I don’t know. Choosing a project with less time between challenge and reward was a big reason it was completed.</p>\n<p><img src=\"./posts/12-building-a-keyboard/06-complete.jpg\" alt=\"Complete\"></p>\n\n","published":"2016-03-30","draft":false,"tags":["electronics"],"title":"Building a keyboard","synopsis":"I’ve been wanting to get into building some physical hardware. A keyboard seemed like a pretty good place to start."},{"id":"11-TIL-tagged-template-literals","content":"<meta name=\"tags\" content=\"til,javascript\" />\n<meta name=\"published\" content=\"2016-03-07\" />\n<h1>Tagged Template Literals</h1>\n<p>Today I learned about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">tagged template literals</a>, a neat new feature of ES6.</p>\n<p>Ordinary template literals are just like interpolation in many other languages.</p>\n<pre><code class=\"hljs language-scala\"><span class=\"hljs-comment\">// Scala</span>\n<span class=\"hljs-keyword\">val</span> msg = <span class=\"hljs-string\">\"World\"</span>\nprintln(s<span class=\"hljs-string\">\"Hello $msg\"</span>)\n</code></pre>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># Ruby</span>\nmsg = <span class=\"hljs-string\">\"World\"</span>\nputs <span class=\"hljs-string\">\"Hello <span class=\"hljs-subst\">#{world}</span>\"</span>\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// JavaScript</span>\n<span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-string\">\"World\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${msg}</span>`</span>);\n</code></pre>\n<p>A tagged template literal is one where you prefix the template literal with a function identifier which will be used to perform the interpolation.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">strings, ...values</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(strings); <span class=\"hljs-comment\">// [\"Hello \", \"\"]</span>\n  <span class=\"hljs-built_in\">console</span>.log(values); <span class=\"hljs-comment\">// [\"World\"}</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"foo\"</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> msg = <span class=\"hljs-string\">\"World\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(foo<span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${msg}</span>`</span>); <span class=\"hljs-comment\">// \"foo\"</span>\n</code></pre>\n<p>This feature allows for a bunch of really interesting options for how to get values into strings, the following links have some ideas:</p>\n<ul>\n<li><a href=\"https://github.com/dmnd/dedent\">Dedenting multiline code</a></li>\n<li><a href=\"https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en\">Google Developers - a bunch of ideas at the end</a></li>\n<li><a href=\"https://leanpub.com/understandinges6/read/#leanpub-auto-tagged-templates\">Understanding ECMAScript 6</a></li>\n</ul>\n\n","published":"2016-03-07","draft":false,"tags":["til","javascript"],"title":"Tagged Template Literals","synopsis":"Today I learned about tagged template literals, a neat new feature of ES6."},{"id":"10-TIL-how-to-solder","content":"<meta name=\"tags\" content=\"til,electronics\" />\n<meta name=\"published\" content=\"2016-03-06\" />\n<h1>How to solder</h1>\n<p>I started building out my <a href=\"https://atreus.technomancy.us/\">Atreus</a> keyboard today and the first step was to solder some diodes. I’d not really soldered before and the <a href=\"https://atreus.technomancy.us/assembly.pdf\">assembly guide</a> referenced the <a href=\"https://learn.adafruit.com/adafruit-guide-excellent-soldering/tools\">Ada Fruit Guide to Soldering</a>. This guide was awesome and really gave me some confidence to start my assembly.</p>\n\n","published":"2016-03-06","draft":false,"tags":["til","electronics"],"title":"How to solder","synopsis":"I started building out my Atreus keyboard today and the first step was to solder some diodes. I’d not really soldered before and the assembly guide referenced the Ada Fruit Guide to Soldering. This guide was awesome and really gave me some confidence to start my assembly."},{"id":"03-frankenstein-javascript-generator","content":"<meta name=\"tags\" content=\"javascript,ast\" />\n<meta name=\"published\" content=\"2016-01-04\" />\n<h1>Frankenstein JavaScript Generator</h1>\n<p>While implementing the Copy Paste Detector I wrote about in my <a href=\"#/post/02-javascript-copy-paste-detection\">last post</a>, I realised it would be super useful to have a tool that could generate javascript.</p>\n<p>With a bit of research, I found that there is a tool called <a href=\"https://github.com/estools/escodegen\">escodegen</a>, that takes a JavaScript AST and prints it as regular JavaScript string. So all I needed to do was have something that could generate some AST and the printing part would be sorted.</p>\n<h2>In the beginning</h2>\n<p>The first pass at the generator was pretty basic. The implementation of this was basically a giant switch statement where for each node type there was a definition of how to generate it, which may be written in terms of other generated node types. Example pseudo code:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generate</span>(<span class=\"hljs-params\">nodeType</span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (nodeType) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"Identifier\"</span>:\n      <span class=\"hljs-keyword\">return</span> {type: <span class=\"hljs-string\">\"Identifier\"</span>, name: <span class=\"hljs-string\">\"foo\"</span>}\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"FunctionDeclaration\"</span>:\n      <span class=\"hljs-keyword\">return</span> {\n        type: <span class=\"hljs-string\">\"FunctionDeclaration\"</span>,\n        id: generate(<span class=\"hljs-string\">\"Identifier\"</span>),\n        params: [],\n        body: []\n      };\n    ...\n  }\n}\n</code></pre>\n<p>This approach was super tedious to implement, and resulted in many cases where node types would need to be grouped together. The above example generates a function declaration with no body statements, to fix this you need to have some idea of what the valid node types for that section of AST.</p>\n<p>Instead of rethinking, I pushed forward, extending the switch to have some groups of things like Statements which would be randomly sampled from things considered to be Statements:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generate</span>(<span class=\"hljs-params\">nodeType</span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (nodeType) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"Identifier\"</span>:\n      <span class=\"hljs-keyword\">return</span> {type: <span class=\"hljs-string\">\"Identifier\"</span>, name: <span class=\"hljs-string\">\"foo\"</span>}\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"FunctionDeclaration\"</span>:\n      <span class=\"hljs-keyword\">return</span> {\n        type: <span class=\"hljs-string\">\"FunctionDeclaration\"</span>,\n        id: generate(<span class=\"hljs-string\">\"Identifier\"</span>),\n        params: [],\n        body: [\n          generate(<span class=\"hljs-string\">\"Statement\"</span>)\n        ]\n      };\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"Statement\"</span>:\n      <span class=\"hljs-keyword\">const</span> type = sample([<span class=\"hljs-string\">\"ExpressionStatement\"</span>, <span class=\"hljs-string\">\"FunctionDeclaration\"</span>]);\n      <span class=\"hljs-keyword\">return</span> generate(type);\n    ...\n  }\n}\n</code></pre>\n<p>At the end, there was a <strong>working</strong> solution (if you ignore the stack-overflow errors). But we can do better…</p>\n<h2>Round 2</h2>\n<p>I had heard a bunch of people talk about Markov Chains and how they can be used to generate sequences of English text (similar to <a href=\"https://swiftkey.com/en\">SwiftKey</a>), and that was about all I knew. But it seemed something Markov-y could help me.</p>\n<p>There was an example on the <a href=\"https://en.wikipedia.org/wiki/Markov_chain\">Wikipedia</a> entry which described a creatures eating habits as the following rules:</p>\n<ul>\n<li>It eats exactly once a day.</li>\n<li>If it ate cheese today, tomorrow it will eat lettuce or grapes with equal probability.</li>\n<li>If it ate grapes today, tomorrow it will eat grapes with probability 1/10, cheese with probability 4/10 and lettuce with probability 5/10.</li>\n<li>If it ate lettuce today, tomorrow it will eat grapes with probability 4/10 or cheese with probability 6/10. It will not eat lettuce again tomorrow.</li>\n</ul>\n<p>Looks like if we replace food with JavaScript AST node properties we are in business. So the first sample model looked something like:</p>\n<ul>\n<li>a FunctionDeclaration <code>id</code> is always an Identifier</li>\n<li>a FunctionDeclaration <code>params</code> is always an list of Identifier’s</li>\n<li>a FunctionDeclaration <code>body</code> is 3/1 split between an ExpressionStatement and another FunctionDeclaration</li>\n<li>an ExpressionStatement always has an Identifier expression</li>\n<li>an Identifier always has a name of “foo”</li>\n</ul>\n<p>And in data form:</p>\n<pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">\"FunctionDeclaration.id\"</span>: {\n    <span class=\"hljs-string\">\"Identifier\"</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-string\">\"FunctionDeclaration.params[]\"</span>: {\n    <span class=\"hljs-string\">\"Identifier\"</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-string\">\"FunctionDeclaration.body[]\"</span>: {\n    <span class=\"hljs-string\">\"ExpressionStatement\"</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-string\">\"FunctionDeclaration\"</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-string\">\"ExpressionStatement.expression\"</span>: {\n    <span class=\"hljs-string\">\"Identifier\"</span>: <span class=\"hljs-number\">1</span>\n  },\n  <span class=\"hljs-string\">\"Identifier.name\"</span>: {\n    <span class=\"hljs-string\">\"foo\"</span>: <span class=\"hljs-number\">1</span>\n  }\n}\n</code></pre>\n<p><strong>It is important to note that this model is not entirely complete, in that some elements are only valid at certain positions within a node array e.g. a ReturnStatement can only occur at the end of a FunctionDeclaration.body.</strong></p>\n<p>When generating FunctionDeclarations, this model creates things like:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">foo</span>) </span>{\n foo\n}\n</code></pre>\n<p>OR</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">foo</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">foo</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">foo</span>) </span>{\n      foo\n    }\n  }\n}\n</code></pre>\n<p>The generate function was refactored to take the desired node type and the model being used to generate from. The new javascript generator was considerably smaller in size, because the logic of what nodes are allowed where was not embedded in the generator, but in the model. But this sample model is so boring, so the next step was to build a tool to create these models from existing code.</p>\n<h2>Beyond foo foo foo</h2>\n<p>With the model roughly sketched out, the analyser would simply have to traverse some javascript code and count instances of node types at different properties with the exclusion of Literals and Identifiers which would need to collect the values.</p>\n<p>The library <a href=\"https://github.com/substack/node-falafel\">falafel</a> gives a nice API for traversing a JavaScript AST, this made it super easy to collect statistics from existing javascript code.</p>\n<h2>Putting it together</h2>\n<p>With the analyser and generator complete with a utility command line interface, it was possible to extract statistics from an existing library and generate new javascript from those statistics.</p>\n<p>The following uses the React library as a source for statistics and generates the following code.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// cat react.js | ./bin/analyse | ./bin/generate</span>\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">r</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> ReactInstanceHandles = <span class=\"hljs-keyword\">this</span>._callbacks.getReactRootIDFromNodeID(<span class=\"hljs-number\">30</span>);\n}(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">styleName</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> element = _dereq_(targetID);\n}));\n</code></pre>\n<p>You don’t need to stop with statistics from one library, it is possible to analyse multiple libraries and generate from the combined statistics.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// cat angular.js react.js | ./bin/analyse | ./bin/generate</span>\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">e</span>(<span class=\"hljs-params\">window</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">beginPhase</span>(<span class=\"hljs-params\">bookKeeping</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (map.keyCode === <span class=\"hljs-string\">'string'</span>) {\n            selectCtrl.retrievalMethod(<span class=\"hljs-keyword\">this</span>.selected);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (offset) {\n                ReactElementValidator.push({ noValidate: <span class=\"hljs-number\">140</span> });\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-built_in\">Array</span>.expect(newIsolateScopeDirective);\n            }\n        }\n    }\n}(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">valueWatchAction</span>(<span class=\"hljs-params\">module</span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> listenerBank) {\n        <span class=\"hljs-keyword\">if</span> (!headers) {\n            <span class=\"hljs-built_in\">Object</span>.invoke(arg);\n        } <span class=\"hljs-keyword\">else</span> {\n            cachedState = <span class=\"hljs-literal\">true</span>;\n        }\n    }\n}));\n</code></pre>\n<h2>Conclusion</h2>\n<p>Getting to this solution was really fun. I was able to iteratively solve the original problem of randomly generating JavaScript and with every iteration I learned a little about JavaScript AST processing and Markov Chains.</p>\n<p>The statistical model still doesn’t track many features of the analysed code, so can not be considered done. It could be interesting to have the analysis pass extract a model that would with certainty generate the original code, this would mean that all code features a being accounted.</p>\n<p>Another extension could be to use the statistical model to drive some IDE auto-completion. It would be great if IDE’s were able to predict what code was coming next based on the code that has already been written.</p>\n<p>If you are interested in looking at the code that makes these things possible, feel free to have a look at <a href=\"https://github.com/akiellor/generate.js\">generate.js</a>.</p>\n<p>If this post was interesting to you, you may want to have a look at the projects in the <a href=\"https://github.com/estools\">estools</a> GitHub organization, particularly <a href=\"https://github.com/estools/esfuzz\">esfuzz</a> which solves the javascript generation problem in a different way for a different purpose.</p>\n\n","published":"2016-01-04","draft":false,"tags":["javascript","ast"],"title":"Frankenstein JavaScript Generator","synopsis":"While implementing the Copy Paste Detector I wrote about in my last post, I realised it would be super useful to have a tool that could generate javascript."},{"id":"02-javascript-copy-paste-detection","content":"<meta name=\"tags\" content=\"javascript,ast\" />\n<meta name=\"published\" content=\"2015-11-04\" />\n<h1>JavaScript copy paste detection</h1>\n<p>A common problem in software development is keeping your software DRY (Don’t Repeat Yourself). Tools have been around for a long time to detect where the code could be more DRY, these tools are lovingly called ‘Copy Paste Detectors’.</p>\n<p>They typically come in two flavours, line based and <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract Syntax Tree</a> based.</p>\n<h2>Line CPD</h2>\n<p>A line based copy paste detector is a language agnostic detector which essentially uses ‘string searching algorithms’ to find duplicates.</p>\n<p>The <a href=\"http://pmd.github.io\">PMD</a> copy paste detector for example uses the <a href=\"https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm\">Rabin–Karp algorithm</a> for finding duplicates. This in many cases works reasonably well, but is essentially just looking at the code as a sequence of characters rather than looking into the inherent structure of the language.</p>\n<h2>Abstract Syntax Tree CPD</h2>\n<p>An Abstract Syntax Tree (AST) based CPD will instead parse the source code into a language specific AST (which a compiler would typically do as part of the compilation process) and finds duplications within the syntax tree.</p>\n<p>For example, the javascript source code:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\"><span class=\"hljs-keyword\">var</span> i</span> = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p>The <a href=\"http://esprima.org\">Esprima</a> parser emits the following AST:</p>\n<pre><code class=\"hljs\">{\n  \"<span class=\"hljs-attribute\">type</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"Program\"</span></span>,\n  \"<span class=\"hljs-attribute\">body</span>\": <span class=\"hljs-value\">[\n    {\n      \"<span class=\"hljs-attribute\">type</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"VariableDeclaration\"</span></span>,\n      \"<span class=\"hljs-attribute\">declarations</span>\": <span class=\"hljs-value\">[\n        {\n          \"<span class=\"hljs-attribute\">type</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"VariableDeclarator\"</span></span>,\n          \"<span class=\"hljs-attribute\">id</span>\": <span class=\"hljs-value\">{\n            \"<span class=\"hljs-attribute\">type</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"Identifier\"</span></span>,\n            \"<span class=\"hljs-attribute\">name</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"i\"</span>\n          </span>}</span>,\n          \"<span class=\"hljs-attribute\">init</span>\": <span class=\"hljs-value\">{\n            \"<span class=\"hljs-attribute\">type</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"Literal\"</span></span>,\n            \"<span class=\"hljs-attribute\">value</span>\": <span class=\"hljs-value\"><span class=\"hljs-number\">1</span></span>,\n            \"<span class=\"hljs-attribute\">raw</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"1\"</span>\n          </span>}\n        </span>}\n      ]</span>,\n      \"<span class=\"hljs-attribute\">kind</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"var\"</span>\n    </span>}\n  ]</span>,\n  \"<span class=\"hljs-attribute\">sourceType</span>\": <span class=\"hljs-value\"><span class=\"hljs-string\">\"script\"</span>\n</span>}\n</code></pre>\n<p>The AST copy paste detector will then walk from the leaves to the root, hashing the nodes of the tree. The hash of each node would typically be a hash of its own properties and the hash of any child nodes.</p>\n<p>The following animation demonstrates the depth first traversal, hashing all attributes of each node with a <strong>SHA</strong>.</p>\n<pre class=\"asciimate\">\n{\n  \"type\": \"Program\",\n  \"body\": [\n    {\n      \"type\": \"VariableDeclaration\",\n      \"declarations\": [\n        {\n          \"type\": \"VariableDeclarator\",\n          \"id\": {\n            \"type\": \"Identifier\",\n            \"name\": \"i\"\n          },\n          \"init\": {\n            \"type\": \"Literal\",\n            \"value\": 1,\n            \"raw\": \"1\"\n          }\n        }\n      ],\n      \"kind\": \"var\"\n    }\n  ],\n  \"sourceType\": \"script\"\n}\n-----\n{\n  \"type\": \"Program\",\n  \"body\": [\n    {\n      \"type\": \"VariableDeclaration\",\n      \"declarations\": [\n        {\n          \"type\": \"VariableDeclarator\",\n          \"id\": <em>f646e41884435fd6c4fa02043d82dfb67169bdf3</em>\n\n\n\n          \"init\": <em>ee8a454ab4410b2a902755210874f2ad4dee54fb</em>\n\n\n\n\n        }\n      ],\n      \"kind\": \"var\"\n    }\n  ],\n  \"sourceType\": \"script\"\n}\n-----\n{\n  \"type\": \"Program\",\n  \"body\": [\n    {\n      \"type\": \"VariableDeclaration\",\n      \"declarations\": [\n        <em>2b08c4d01e659390ef042ad52adbf0c2a02502e0</em>\n\n\n\n\n\n\n\n\n\n\n\n      ],\n      \"kind\": \"var\"\n    }\n  ],\n  \"sourceType\": \"script\"\n}\n-----\n{\n  \"type\": \"Program\",\n  \"body\": [\n    <em>804767351e5c475668d0bfaa913d4b7876ae0ecd</em>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ],\n  \"sourceType\": \"script\"\n}\n-----\n<em>d14802401406b46450b15d0a00a578060242a27a</em>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</pre>\n<p>These tools will record both the hash of the AST node and the source location where that hash was encountered and create a report of incidents where duplicate hashes occur.</p>\n<p>This approach is more accurate in detecting duplications of code that does not have identical source, but is semantically the same. For example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a     =       <span class=\"hljs-number\">1</span>;\n</code></pre>\n<p>Also, the AST approach can support <em>fuzzy</em> duplication checks, allowing a user to find duplications where the code is essentially the same but has some minor adjustments.</p>\n<p>This is achieved by introducing a hash function that will create <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">collisions</a> for content that is deemed similar. For example, if a hash function is created such that hashing any <em>Identifier</em> node results in the same hash value, then the following snippets would have identical hashes, and thus identified as a <em>duplicate</em>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  doThing(i);\n}\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  doAnotherThing(i);\n}\n</code></pre>\n<p>This approach is described further in the paper <a href=\"http://research.microsoft.com/en-us/um/people/leonardo/files/ICSM98.pdf\">Clone Detection Using Abstract Syntax Trees</a>.</p>\n<p>If folks are interested in an implementation of this approach for JavaScript, feel free to have a look at <a href=\"https://github.com/akiellor/patterns.js\">patterns.js</a>. Feedback on this project or this post is welcome.</p>\n\n","published":"2015-11-04","draft":false,"tags":["javascript","ast"],"title":"JavaScript copy paste detection","synopsis":"A common problem in software development is keeping your software DRY (Don’t Repeat Yourself). Tools have been around for a long time to detect where the code could be more DRY, these tools are lovingly called ‘Copy Paste Detectors’."},{"id":"13-how-to-password","content":"\n","draft":true,"tags":[],"title":"","synopsis":""},{"id":"08-building-a-router","content":"<meta name=\"tags\" content=\"networking,iptables\" />\n<h1>Building a router</h1>\n<p>I’ve been thinking about building a wifi extension device for my apartment because the wifi doesn’t quite get from one end to the other. I really have little to no networking knowledge so wanted to dig into how routing actually works before hand.</p>\n<p>This blog will go into how I experimented with VirtualBox to build a virtual router to bridge between two networks.</p>\n<h2>The Setup</h2>\n<p>Internet</p>\n<p>Laptop (OSX)</p>\n<p>Router (Alpine Linux)</p>\n<ul>\n<li>eth0 host-only</li>\n<li>eth1 (VirtualBox Private Network)</li>\n</ul>\n<p>Isolated (Alpine Linux)</p>\n<ul>\n<li>eth0 (VirtualBox Private Network)</li>\n</ul>\n<h2>Router</h2>\n<p>Alpine Linux has a neat little frontend for iptables called awall. There was a sample configuration which all but worked for me <a href=\"http://wiki.alpinelinux.org/wiki/How-To_Alpine_Wall#Example_firewall_using_AWall\">here</a>.</p>\n<pre><code class=\"hljs language-bash\">$ cat &gt; /etc/network/interfaces &lt;&lt;EOS\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet dhcp\n\nhostname router\n\nauto eth1\niface eth1 inet static\n  address <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.1</span>\n  netmask <span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.0</span>\n\nEOS\n$ apk add --update awall\n$ modprobe ip_tables\n$ modprobe iptable_nat\n$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-number\">1</span> &gt; /proc/sys/net/ipv4/ip_forward\n$ /etc/init.d/networking restart\n</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// /etc/awall/optional/router.json</span>\n{\n  <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Home firewall\"</span>,\n\n  <span class=\"hljs-string\">\"zone\"</span>: {\n    <span class=\"hljs-string\">\"inet\"</span>: { <span class=\"hljs-string\">\"iface\"</span>: <span class=\"hljs-string\">\"eth0\"</span> },\n    <span class=\"hljs-string\">\"loc\"</span>: { <span class=\"hljs-string\">\"iface\"</span>: <span class=\"hljs-string\">\"eth1\"</span> }\n  },\n\n  <span class=\"hljs-string\">\"policy\"</span>: [\n    { <span class=\"hljs-string\">\"in\"</span>: <span class=\"hljs-string\">\"_fw\"</span>, <span class=\"hljs-string\">\"action\"</span>: <span class=\"hljs-string\">\"accept\"</span> },\n    { <span class=\"hljs-string\">\"in\"</span>: <span class=\"hljs-string\">\"loc\"</span>, <span class=\"hljs-string\">\"out\"</span>: <span class=\"hljs-string\">\"inet\"</span>, <span class=\"hljs-string\">\"action\"</span>: <span class=\"hljs-string\">\"accept\"</span> }\n  ],\n\n  <span class=\"hljs-string\">\"snat\"</span>: [\n    { <span class=\"hljs-string\">\"out\"</span>: <span class=\"hljs-string\">\"inet\"</span> }\n  ]\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">$ awall <span class=\"hljs-built_in\">enable</span> router <span class=\"hljs-comment\">#enable the policy</span>\n$ awall activate <span class=\"hljs-comment\">#create and update the iptables rules</span>\n</code></pre>\n<h2>Isolated</h2>\n<p>The isolated VM doesn’t know anything about our router, so we have to fix that. The <code>ip route</code> subcommand can be used to manipulate the <a href=\"https://en.wikipedia.org/wiki/Routing_table\">route table</a>, which is basically a list of rules which paths to different machines on the network.</p>\n<pre><code class=\"hljs language-bash\">$ cat &gt; /etc/network/interfaces &lt;&lt;EOS\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static\n  address <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.2</span>\n  netmask <span class=\"hljs-number\">255.255</span>.<span class=\"hljs-number\">255.0</span>\n  gateway <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.1</span>\n\nEOS\n$ /etc/init.d/networking restart\n</code></pre>\n\n","draft":true,"tags":["networking","iptables"],"title":"Building a router","synopsis":"I’ve been thinking about building a wifi extension device for my apartment because the wifi doesn’t quite get from one end to the other. I really have little to no networking knowledge so wanted to dig into how routing actually works before hand."},{"id":"06-canary-builds","content":"<h1>Canary builds</h1>\n\n","draft":true,"tags":[],"title":"Canary builds","synopsis":""},{"id":"05-a-better-testing-system","content":"<h1>A Better Test System</h1>\n<p>After working on a number of projects I’ve observed a constant tension on the topic of <em>end to end tests</em> or <em>system tests</em>. This tension comes from:</p>\n<ul>\n<li>Coverage vs Speed</li>\n<li>Inefficient, tests re-run the same steps to make a different assertion</li>\n<li>Confidence in lower level tests</li>\n<li>Difficulty in changing\n<ul>\n<li>Often slow, so testing a change can be time consuming</li>\n<li>Requires good up-front organisation, with ongoing widespread understanding of organisation to stem the test proliferation problem.</li>\n<li>Difficult to know which tests are similar without sitting and reading each test</li>\n</ul>\n</li>\n<li>Difficult/manual to tailor suite for different purposes i.e. smoke check, happy path, high value or regression.</li>\n</ul>\n\n","draft":true,"tags":[],"title":"A Better Test System","synopsis":"After working on a number of projects I’ve observed a constant tension on the topic of end to end tests or system tests. This tension comes from:"},{"id":"04-making-that-mainframe-do-your-bidding","content":"<h1>Making that mainframe do your bidding</h1>\n\n","draft":true,"tags":[],"title":"Making that mainframe do your bidding","synopsis":""},{"id":"09-awesome-ocr","content":"\n","draft":true,"tags":[],"title":"","synopsis":""},{"id":"01-a-foray-into-kernel-development","content":"<h1>A foray into Kernel Development</h1>\n<p>Off the back of a couple of discussions with colleagues about unikernels and the tooling that is sprouting to support the idea, I decided to learn a little more about kernel development.</p>\n<p><a href=\"http://wiki.osdev.org/\">OS Dev</a> provided a pretty good starting point with its <a href=\"http://wiki.osdev.org/Bare_Bones\">Bare Bones</a> tutorial. This tutorial takes you through to having a working ‘Hello World’ kernel. It mostly includes all the required code samples. The most difficult part of this tutorial was getting a gcc cross compiler working. OS Dev has a tutorial <a href=\"http://wiki.osdev.org/GCC_Cross-Compiler\">GCC Cross Compiling</a>, but it was filled with manual steps and I struggled to get something working. Thankfully there had been some work to script the cross compilation by another tutorial <a href=\"http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler\">How to build a GCC Cross-Compiler</a>, the scripted solution worked almost unaltered.</p>\n<p>You can find the resulting kernel here <a href=\"http://github.com/akiellor/hello-kernel\">Hello Kernel</a>.</p>\n<h2>Learned about</h2>\n<ul>\n<li>the x86 architecture</li>\n<li>the multiboot specification for bootloaders</li>\n<li>a little assembly code (and that there are two dialects, AT&amp;T and Intel)</li>\n<li>VGA and the framebuffer</li>\n<li>a little C</li>\n</ul>\n\n","draft":true,"tags":[],"title":"A foray into Kernel Development","synopsis":"Off the back of a couple of discussions with colleagues about unikernels and the tooling that is sprouting to support the idea, I decided to learn a little more about kernel development."},{"id":"07-accessibility-testing","content":"\n","draft":true,"tags":[],"title":"","synopsis":""}]
